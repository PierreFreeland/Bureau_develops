version: 2
workflows:
  version: 2
  build-test-compile-package:
    jobs:
      - build
      - test_api:
          requires:
            - build
      - test_bureau_client:
          requires:
            - build
      - test_bureau_consultant1:
          requires:
            - build
      - test_bureau_consultant2:
          requires:
            - build
      - test_bureau_consultant3:
          requires:
            - build
      - test_bureau_soustraitant:
          requires:
            - build
      - test_goxygene:
          requires:
            - build
      - test_devise:
          requires:
            - build
      - test_jobs:
          requires:
            - build
      - test_models:
          requires:
            - build
      - compile_assets:
          requires:
            - build
      - containerize:
          requires:
            - test_api
            - test_bureau_client
            - test_bureau_consultant1
            - test_bureau_consultant2
            - test_bureau_consultant3
            - test_bureau_soustraitant
            - test_goxygene
            - test_devise
            - test_jobs
            - test_models
            - compile_assets
  release:
    jobs:
      - release:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

x-job_with_database: &job_with_database
  docker:
    - image: circleci/ruby:2.4.4-stretch-node-browsers
      environment:
        PGHOST: localhost
        PGUSER: hub
    - image: postgres:12.7
      environment:
        POSTGRES_USER: hub
        POSTGRES_DB: hub_test
        POSTGRES_PASSWORD: x^^kkG5n2Qu76AE5
    - image: redis

  working_directory: ~/hub

x-steps:
  - &attach_workspace
    attach_workspace:
      at: ~/hub

  - &install_dependencies
    run:
      name: install dependencies
      command: sudo apt-get update && sudo apt install -y postgresql-client libmagic-dev || true

  - &install_bundler
    run:
      name: install Bundler
      command: |
        echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
        source $BASH_ENV
        gem install bundler --version=$BUNDLER_VERSION
        bundle config set --local path vendor/bundle

  - &wait_for_postgresql
    run:
      name: Wait for postgresql
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  - &wait_for_redis
    run:
      name: Wait for redis
      command: dockerize -wait tcp://localhost:6379 -timeout 1m

  - &database_setup
    run:
      name: database setup
      command: |
        RAILS_ENV=test bundle exec rake db:create
        RAILS_ENV=test bundle exec rake db:structure:load
        RAILS_ENV=test bundle exec rake db:fixtures:load
        echo 'create database services_test' | psql hub_test
        bzcat db/fiches_services.sql.bz2 | psql services_test

  - &store_test_results
    store_test_results:
      path: test/reports

jobs:
  release:
    docker:
      - image: cimg/base:2021.10

    working_directory: ~/hub

    steps:
      - checkout
      - run:
          name: install pip (for awscli) + ruby (to parse json produced by awscli)
          command: sudo apt-get update && sudo apt-get install python3-pip ruby ruby-json

      - run:
          name: install awscli
          command: sudo pip install awscli

      - run:
          name: create task definition for missioneo - production
          command: |
            export BRANCH=`git branch -a --contains $CIRCLE_SHA1 | tail -1 | sed 's|.*remotes/origin/||' | tr '/' '_'`
            export TAG=`echo $CIRCLE_TAG | tr '.' '_' `
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix production-missioneo-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-missioneo.json
            .circleci/parse_task_definition_for_production.rb task-definition-missioneo.json production-missioneo-${TAG} ${AWS_ECR_URL}:missioneo-${BRANCH}-${CIRCLE_SHA1} > missioneo-task-definition-${TAG}.json
            .circleci/parse_task_definition_for_cron.rb task-definition-missioneo.json production-missioneo-cron-${TAG} ${AWS_ECR_URL}:missioneo-${BRANCH}-${CIRCLE_SHA1} > missioneo-task-definition-cron-${TAG}.json
            aws ecs register-task-definition --cli-input-json file://missioneo-task-definition-${TAG}.json > missioneo-prod-task-definition-registration-${TAG}.json
            aws ecs register-task-definition --cli-input-json file://missioneo-task-definition-cron-${TAG}.json > missioneo-prod-task-definition-cron-registration-${TAG}.json

      - run:
          name: create task definition for freeteam - production
          command: |
            export BRANCH=`git branch -a --contains $CIRCLE_SHA1 | tail -1 | sed 's|.*remotes/origin/||' | tr '/' '_'`
            export TAG=`echo $CIRCLE_TAG | tr '.' '_' `
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix production-freeteam-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-freeteam.json
            .circleci/parse_task_definition_for_production.rb task-definition-freeteam.json production-freeteam-${TAG} ${AWS_ECR_URL}:freeteam-${BRANCH}-${CIRCLE_SHA1} > freeteam-task-definition-${TAG}.json
            .circleci/parse_task_definition_for_cron.rb task-definition-freeteam.json production-freeteam-cron-${TAG} ${AWS_ECR_URL}:freeteam-${BRANCH}-${CIRCLE_SHA1} > freeteam-task-definition-cron-${TAG}.json
            aws ecs register-task-definition --cli-input-json file://freeteam-task-definition-${TAG}.json > freeteam-prod-task-definition-registration-${TAG}.json
            aws ecs register-task-definition --cli-input-json file://freeteam-task-definition-cron-${TAG}.json > freeteam-prod-task-definition-cron-registration-${TAG}.json

  containerize:
    docker:
      - image: cimg/base:2021.10

    working_directory: ~/hub

    steps:
      - *attach_workspace
      - setup_remote_docker:
          version: 19.03.12
          docker_layer_caching: true

      - run:
          name: remove unnecessary files before creating image
          command: |
            mv tmp/cache_for_freeteam ..
            mv public/assets_for_freeteam ..

      - run:
          name: Build application Docker image
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            docker build --build-arg BUNDLE_GEMS_KEY=${BUNDLE_GEMS__ITG__FR} -t oxygene-hub/missioneo-${BRANCH} .

      - run:
          name: restore freeteam assets
          command: |
            rm -rf tmp/cache public/assets
            mv ../cache_for_freeteam tmp/cache
            mv ../assets_for_freeteam public/assets

      - run:
          name: build freeteam docker image
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            docker build -f Dockerfile.freeteam --build-arg BUNDLE_GEMS_KEY=${BUNDLE_GEMS__ITG__FR} -t oxygene-hub/freeteam-${BRANCH} .

      - run:
          name: install pip (for awscli) + ruby (to parse json produced by awscli)
          command: sudo apt-get update && sudo apt-get install python3-pip ruby ruby-json
      - run:
          name: install awscli
          command: sudo pip install awscli
      - run:
          name: tag images for ECR
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            docker tag oxygene-hub/missioneo-${BRANCH}:latest ${AWS_ECR_URL}:missioneo-${BRANCH}-${CIRCLE_SHA1}
            docker tag oxygene-hub/freeteam-${BRANCH}:latest ${AWS_ECR_URL}:freeteam-${BRANCH}-${CIRCLE_SHA1}
      - run:
          name: login to ECR
          command: aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ECR_URL}
      - run:
          name: push images to ECR
          command: |
            docker push -a ${AWS_ECR_URL}
      - run:
          name: create task definition for freeteam - dev
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix dev-freeteam-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-freeteam.json
            .circleci/parse_task_definition.rb task-definition-freeteam.json dev-freeteam-${BRANCH} ${AWS_ECR_URL}:freeteam-${BRANCH}-${CIRCLE_SHA1} > freeteam-task-definition-${BRANCH}.json
            aws ecs register-task-definition --cli-input-json file://freeteam-task-definition-${BRANCH}.json > freeteam-dev-task-definition-registration-${BRANCH}.json
      - run:
          name: create task definition for missioneo - dev
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix dev-missioneo-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-missioneo.json
            .circleci/parse_task_definition.rb task-definition-missioneo.json dev-missioneo-${BRANCH} ${AWS_ECR_URL}:missioneo-${BRANCH}-${CIRCLE_SHA1} > missioneo-task-definition-${BRANCH}.json
            aws ecs register-task-definition --cli-input-json file://missioneo-task-definition-${BRANCH}.json > missioneo-dev-task-definition-registration-${BRANCH}.json
      - run:
          name: create task definition for freeteam - preprod
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix preprod-freeteam-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-freeteam.json
            .circleci/parse_task_definition.rb task-definition-freeteam.json preprod-freeteam-${BRANCH} ${AWS_ECR_URL}:freeteam-${BRANCH}-${CIRCLE_SHA1} > freeteam-task-definition-${BRANCH}.json
            aws ecs register-task-definition --cli-input-json file://freeteam-task-definition-${BRANCH}.json > freeteam-preprod-task-definition-registration-${BRANCH}.json
      - run:
          name: create task definition for missioneo - preprod
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`
            aws ecs describe-task-definition --task-definition `aws ecs list-task-definitions --family-prefix preprod-missioneo-base | jq -r '.["taskDefinitionArns"][-1]'` > task-definition-missioneo.json
            .circleci/parse_task_definition.rb task-definition-missioneo.json preprod-missioneo-${BRANCH} ${AWS_ECR_URL}:missioneo-${BRANCH}-${CIRCLE_SHA1} > missioneo-task-definition-${BRANCH}.json
            aws ecs register-task-definition --cli-input-json file://missioneo-task-definition-${BRANCH}.json > missioneo-preprod-task-definition-registration-${BRANCH}.json
      - run:
          name: update dev services with new task definition
          command: |
            export BRANCH=`echo $CIRCLE_BRANCH | tr '/' '_'`

            if [ ${CIRCLE_BRANCH} = 'develop' ]
            then
              echo "deploying ${CIRCLE_BRANCH}"
              aws ecs update-service --cluster nonprod --service freeteam-dev --task-definition `cat freeteam-dev-task-definition-registration-${BRANCH}.json | jq -r '.["taskDefinition"]["taskDefinitionArn"]'`
              aws ecs update-service --cluster nonprod --service missioneo-dev --task-definition `cat missioneo-dev-task-definition-registration-${BRANCH}.json | jq -r '.["taskDefinition"]["taskDefinitionArn"]'`
            else
              echo "no deployment for branch ${CIRCLE_BRANCH}"
            fi

  build:
    docker:
      - image: circleci/ruby:2.4.4-stretch

    working_directory: ~/hub

    steps:
      - checkout

      - run:
          name: changing submodule address to use SSH
          command: sed -i 's|https://github.com/|git@github.com:|' .gitmodules

      - run:
          name: checkout submodules
          command: |
            IFS=$'\n'
            for submodule in `git submodule status` ; do
              path=`echo ${submodule} | cut -f2 -d' '`
              name=`echo ${path} | sed 's|.*/||'`
              url=`git config --file .gitmodules --get submodule.${path}.url`
              echo "submodule: ${name} at ${path} with remote ${url}"
              echo " -> making backup copy of original ssh key"
              cp ~/.ssh/id_rsa ~/.ssh/id_rsa_back
              echo " -> setting up ssh key for submodule"
              eval echo -e \$SSH_KEY_FOR_${name} > ~/.ssh/id_rsa
              ssh-add -D
              ssh-add
              echo " -> fetching submodule"
              git submodule sync -- ${path}
              git submodule update --init -- ${path}
              echo " -> restoring original ssh key"
              cp ~/.ssh/id_rsa_back ~/.ssh/id_rsa
              ssh-add -D
            done

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: sudo apt-get update && sudo apt install -y postgresql-client libmagic-dev || true

      - run:
          name: create local database.yml configuration file
          command: |
            cat << EOF > config/database.yml
            default: &default
              adapter: postgresql
              pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
              encoding: unicode
              timeout: 5000
            development:
              <<: *default
              database: hub_development
            test:
              <<: *default
              database: hub_test
            cms_test:
              <<: *default
              database: services_test
            production:
              <<: *default
              database: hub_production
            EOF

      - run:
          name: install Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler --version=$BUNDLER_VERSION

      - run:
          name: configure Bundler
          command: |
            bundle config set --local path vendor/bundle

      - run:
          name: install gems
          command: RAILS_ENV=production bundle install --jobs 4 --retry 3

      - save_cache:
          paths:
            - ~/hub/vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - persist_to_workspace:
          root: ~/hub
          paths:
            - .

  test_bureau_client:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/contexts/bureau_client/**/*_test.rb
      - *store_test_results

  test_bureau_consultant1:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/bureau_consultant/**/[a-g]*.rb
      - *store_test_results

  test_bureau_consultant2:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/bureau_consultant/**/[h-r]*.rb
      - *store_test_results

  test_bureau_consultant3:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/bureau_consultant/**/[s-z]*.rb
      - *store_test_results

  test_bureau_soustraitant:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/bureau_soustraitant/**/*.rb
      - *store_test_results

  test_goxygene:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/goxygene/**/*.rb
      - *store_test_results

  test_models:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/models/**/*.rb
      - *store_test_results

  test_jobs:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/jobs/**/*.rb
      - *store_test_results

  test_api:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/api/**/*.rb
      - *store_test_results

  test_devise:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - *database_setup
      - run:
          name: run tests
          command: bundle exec rake test ALL=yes BACKTRACE=yes TEST=test/controllers/devise/**/*.rb
      - *store_test_results

  compile_assets:
    <<: *job_with_database
    steps:
      - *attach_workspace
      - *install_dependencies
      - *install_bundler
      - *wait_for_postgresql
      - *wait_for_redis
      - run:
          name: compile assets for freeteam
          command: |
            cat config/freeteam.env | RAILS_LOG_TO_STDOUT='1' SECRET_KEY_BASE=`date +%s | sha512sum | head -c 128` RAILS_ENV=production xargs bundle exec rake assets:precompile
            mv tmp/cache tmp/cache_for_freeteam
            mv public/assets public/assets_for_freeteam
      - run:
          name: compile assets
          command: RAILS_LOG_TO_STDOUT='1' SECRET_KEY_BASE=`date +%s | sha512sum | head -c 128` RAILS_ENV=production bundle exec rake assets:precompile
      - persist_to_workspace:
          root: ~/hub
          paths:
            - .
