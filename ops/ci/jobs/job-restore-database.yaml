apiVersion: batch/v1
kind: Job
metadata:
  name: __JOB_NAME__
  labels:
    type: restore-database
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: migrate
        image: build.synbioz.com/synbioz/docker-images/postgresql-aws-s3/app:0.6.0-postgres-13.2
        command: [ "/bin/bash" ]
        args:
        - -c
        - |
          #!/usr/bin/env bash

          # Ensure data directory exist
          mkdir -p /data
          RESTORE_ME="/data/app/backup.tar.bz2"
          BUCKET_NAME=${BUCKET_NAME:-"com.plunge.backups"}

          download_backup(){
            if [ -z "$S3_RESTORE_FILE" ]; then
              file=$(aws s3api list-objects-v2 --bucket "${BUCKET_NAME}" --prefix "${S3_RESTORE}" --query 'reverse(sort_by(Contents,&LastModified))[0]' | jq -r '.Key')
            else
              file="${S3_RESTORE_FILE}"
            fi
            echo "Last dump find: $file"
            aws s3 cp s3://"${BUCKET_NAME}"/"${file}" ${RESTORE_ME}
          }

          drop_database(){
            current_database=$(psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d "${POSTGRES_DB}" -c "\echo 1" | grep -c 1)
            if [ "${current_database}" = "1" ]; then
              echo "Delete current database"
              psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "ALTER DATABASE \"${POSTGRES_DB}\" CONNECTION LIMIT 0;"
              psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '${POSTGRES_DB}';"
              psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "DROP DATABASE IF EXISTS \""${POSTGRES_DB}"\";"
            fi
          }

          create_database(){
            psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "CREATE DATABASE \"${POSTGRES_DB}\";"
            psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE \"${POSTGRES_DB}\" to \"${POSTGRES_USER}\";"
          }

          enabled_extensions(){
            oldIFS=$IFS
            IFS=';'
            if [ "$POSTGRES_EXTENSIONS" != "" ]; then
              for extension in $POSTGRES_EXTENSIONS; do
                echo "Enable extension: $extension"
                psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -d postgres -c "CREATE EXTENSION IF NOT EXISTS ${extension};"
              done
            fi

            IFS=$oldIFS
          }

          restore_database(){
            bzip2 -c -d "$RESTORE_ME" | psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" "${POSTGRES_DB}"
          }

          clean(){
            rm -rf $RESTORE_ME
          }

          main(){
            download_backup
            drop_database
            create_database
            restore_database
            clean
          }

          export S3_RESTORE_FILE=databases/postgres-staging/itg/fiches_services.sql.bz2
          export POSTGRES_DB=oxygene-hub-__ENV_NAME__-service
          main
          export S3_RESTORE_FILE=databases/postgres-staging/itg/oxygene_latest.sql.bz2
          export POSTGRES_DB=oxygene-hub-__ENV_NAME__
          main
        env:
        - name: AWS_DEFAULT_REGION
          value: "eu-west-3"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-s3-plunge-backup
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-s3-plunge-backup
              key: aws_secret_access_key
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: stack-postgresql-13
              key: postgresql-host
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: stack-postgresql-13
              key: postgresql-username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: stack-postgresql-13
              key: postgresql-password

      imagePullSecrets:
      - name: synbioz


